AWSTemplateFormatVersion: '2010-09-09'
Description: Pictordle Stack

Parameters:
  AppServerECRImage:
    Type: String
    Description: The URL to the image for the app server
    Default: 101357155028.dkr.ecr.us-east-1.amazonaws.com/pictordle:latest
  LatestECSOptimizedAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: AMI ID
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/24

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref Vpc


  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PostsTable
      AttributeDefinitions:
        - AttributeName: User
          AttributeType: S
      KeySchema:
        - AttributeName: User
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  AppServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: PictordleAppServer
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      Cpu: 1024
      Memory: 1024
      ExecutionRoleArn: !GetAtt AppServerEC2Role.Arn
      ContainerDefinitions:
        - Name: AppServer
          Image: !Ref AppServerECRImage
          Cpu: 1024
          Memory: 1024
          Essential: true
          Environment:
            - Name: PORT
              Value: 80
            - Name: POST_TABLE_NAME
              Value: !Ref PostsTable
          PortMappings:
            - ContainerPort: 80
              HostPort: 80

  MyECSCluster:
    Type: AWS::ECS::Cluster

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AppServerEC2Role

  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestECSOptimizedAMI
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !GetAtt MyInstanceProfile.Arn
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${MyECSCluster} >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region}

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 1
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber

  EC2CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup

  ClusterCPAssocation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref MyECSCluster
      CapacityProviders:
        - !Ref EC2CapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref EC2CapacityProvider
          Weight: 1

  AppServerService:
    Type: AWS::ECS::Service
    Properties: 
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref AppServerTaskDefinition
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      CapacityProviderStrategy:
        - CapacityProvider: !Ref EC2CapacityProvider
          Weight: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref Subnet
          SecurityGroups:
            - !Ref SecurityGroup

  AppServerEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PictordleAppServerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PostsTableAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt PostsTable.Arn
        - PolicyName: ConnectToECSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action:
                  - ecs:*
                Resource: '*'

Outputs:
  PostTableARN:
    Description: The ARN of the new table
    Value: !GetAtt PostsTable.Arn
